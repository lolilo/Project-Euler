"""
The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""

def triangle_number_up_to_n_list(n):
    l = [None] * (n + 1)
    l[0] = 0
    l[1] = 1
    for i in range(2, len(l)):
        l[i] = l[i-1] + i
    return l

def triangle_number_up_to_n(n):
    curr = 1
    for i in range(2, n+1):
        curr += i
    return curr

# returns number of factors for integer n
def number_of_factors(n):
    if n == 1:
        return 1

    count = 2 # initalize to two -- always divisible by 1 and itself
    for num in range(2, n/2 + 1):
        if n % num == 0: 
            count += 1
    return count

def memoize(f):
    cache = {}
    def decorated_function(*args):
        if cache.get(args):
            return cache[args]
        else: 
            cache[args] = f(*args)
            return cache[args]
    return decorated_function

@memoize # I am missing factors with this. For example, for input 200, I miss 4.
def number_of_factors_recursive(n):
    if n <= 1: # doesn't handle negative numbers or initial input 1. Could handle this with helper function later.
        return 0

    num = 2
    # print n, num
    # print n%num
    while n % num != 0:
        num += 1
    print n, num
    return 2 + number_of_factors_recursive(n/num) 

# return first triangle number to have over n divisors
def first_to_num_factors_recursive(n):
    curr_triangle_number = 1
    i = 2
    while number_of_factors_recursive(curr_triangle_number) <= n:
        curr_triangle_number += i
        i += 1
    return curr_triangle_number

# return first triangle number to have over n divisors
def first_to_num_factors(n):
    curr_triangle_number = 1
    i = 2
    while number_of_factors(curr_triangle_number) <= n:
        curr_triangle_number += i
        i += 1
    return curr_triangle_number

# print triangle_number_up_to_n_list(10)

# print triangle_number_up_to_n(10)
# print number_of_factors(28)
print number_of_factors_recursive(200)

# print first_to_num_factors(5)


